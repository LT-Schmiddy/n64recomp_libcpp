#!groovy
@Library('jenkins-pipeline-lib') _

pipeline
{
  agent any
  environment
  {
    GIT_CHANGE_LOG = gitChangeLog(currentBuild.changeSets)
  }
  parameters
  {
    string(defaultValue: '1', description: 'Major version number (x.0.0)', name: 'MAJOR_VERSION')
    string(defaultValue: '0', description: 'Minor version number (0.x.0)', name: 'MINOR_VERSION')
  }
  triggers
  {
    //At 04:00 on every day-of-week from Monday through Friday.
    pollSCM('H 4 * * 1-5')
  }
  stages
  {
    stage('Setup')
    {
      steps
      {
        echo 'Running make clean...'
        sh 'make distclean'

        gitTagPreBuild "${params.MAJOR_VERSION}.${params.MINOR_VERSION}.${BUILD_NUMBER}"
      }
    }
    stage('Build')
    {
      steps
      {
        sh 'make'
      }
    }
    stage('Cross Compile for ARM')
    {
      steps
      {
        sh 'meson buildresults/arm/ --cross-file build/cross/arm.txt --cross-file build/cross/cortex-m3.txt -Denable-threading=false -Dlibcxx-enable-chrono=false -Dlibcxx-monotonic-clock=false'
        sh 'ninja -C buildresults/arm'
      }
    }
  }
  post
  {
    always
    {
      // Scan for open tasks, warnings, issues, etc.
      recordIssues(
        enabledForFailure: true,
        healthy: 5,
        unhealthy: 10,
        referenceJobName: 'ea-nightly/libcpp/master',
        qualityGates: [
          // 3 new issue: unstable
          //[threshold: 3, type: 'DELTA', unstable: true],
          // 5 new issues: failed build
          //[threshold: 5, type: 'DELTA', unstable: false],
          // 10 total issues: unstable
          //[threshold: 55, type: 'TOTAL', unstable: true],
          // 20 total issues: fail
          //[threshold: 75, type: 'TOTAL', unstable: false]
        ],
        tools: [
          clang(),
          taskScanner(
            excludePattern: 'buildresults/**, libcxx/**, libcxxabi/**, build/**',
            includePattern: '**/*.c, **/*.cpp, **/*.h, **/*.hpp, **/*.lua, **/*.sh, **/*.build',
            normalTags: 'TODO, to do, WIP',
            highTags: 'FIXME, FIX',
            ignoreCase: true,
          ),
        ]
      )

      // Report Status
      slackNotify(currentBuild.currentResult)
      gitTagCleanup "${params.MAJOR_VERSION}.${params.MINOR_VERSION}.${BUILD_NUMBER}"
    }
    success
    {
      gitTagSuccess "${params.MAJOR_VERSION}.${params.MINOR_VERSION}.${BUILD_NUMBER}"
    }
    failure
    {
      /*
      * This job does not have a GitHub configuration,
      * so we need to create a dummy config
      */
      githubSetConfig('69e4682e-2951-492f-b828-da06364c322d')
      githubFileIssue()
      emailNotify(currentBuild.currentResult)
    }
  }
}
